"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Slash: () => slash_extension_default,
  SlashCmd: () => components_default,
  SlashCmdProvider: () => slash_provider_default,
  createSuggestionsItems: () => suggestions_default,
  enableKeyboardNavigation: () => enableKeyboardNavigation,
  renderItems: () => render_items_default
});
module.exports = __toCommonJS(src_exports);

// src/components/command.tsx
var import_react5 = require("@xstate/store/react");
var import_cmdk = require("cmdk");
var import_react6 = __toESM(require("react"), 1);

// src/utils/store.ts
var import_store = require("@xstate/store");

// src/types.ts
var import_react = require("react");

// src/utils/store.ts
var slashStore = (0, import_store.createStore)(
  {
    query: "",
    range: null,
    localEditor: null
  },
  {
    setQuery: (_, event) => {
      return {
        query: event.query
      };
    },
    setRange: (_, event) => {
      return {
        range: event.range
      };
    },
    setLocalEditor: (_, event) => {
      return {
        localEditor: event.localEditor
      };
    }
  }
);
var store_default = slashStore;

// src/utils/tunnel.tsx
var import_react2 = __toESM(require("react"), 1);
var import_store2 = require("@xstate/store");
var import_react3 = require("@xstate/store/react");

// src/utils/use-isomorphic-effect.ts
var React = __toESM(require("react"), 1);
var useIsoMorphicEffect = typeof window === "undefined" ? React.useEffect : React.useLayoutEffect;
var use_isomorphic_effect_default = useIsoMorphicEffect;

// src/utils/tunnel.tsx
var tunnel = () => {
  const tunnelStore = (0, import_store2.createStore)(
    {
      currentChildren: []
    },
    {
      addChildren: (context, event) => {
        return {
          currentChildren: [...context.currentChildren, event.value]
        };
      },
      removeChildren: (context, event) => {
        return {
          currentChildren: context.currentChildren.filter(
            (child) => child !== event.value
          )
        };
      }
    }
  );
  return {
    Inlet: (props) => {
      const { children } = props;
      use_isomorphic_effect_default(() => {
        tunnelStore.send({ type: "addChildren", value: children });
        return () => {
          tunnelStore.send({ type: "removeChildren", value: children });
        };
      }, [props.children]);
      return null;
    },
    Outlet: () => {
      const children = (0, import_react3.useSelector)(
        tunnelStore,
        (state) => state.context.currentChildren
      );
      return /* @__PURE__ */ import_react2.default.createElement(import_react2.default.Fragment, null, children);
    }
  };
};
var tunnel_default = tunnel;

// src/components/tunnel-instance.tsx
var import_react4 = __toESM(require("react"), 1);
var SlashCmdTunnelInstanceContext = import_react4.default.createContext(
  null
);
var tunnel_instance_default = SlashCmdTunnelInstanceContext;

// src/utils/constants.ts
var SLASH_EXTENSION_NAME = "slash-menu";
var SLASH_EXTENSION_DOM_ID = "slash-extenbsion-dom-id";
var navigationKeys = ["ArrowUp", "ArrowDown", "Enter"];

// src/components/command.tsx
var Command = import_react6.default.forwardRef((props, ref) => {
  const { children, className, ...restProps } = props;
  const { query } = (0, import_react5.useSelector)(store_default, (state) => state.context);
  const onChange = (query2) => {
    store_default.send({
      type: "setQuery",
      query: query2
    });
  };
  return /* @__PURE__ */ import_react6.default.createElement(tunnel_instance_default.Consumer, null, (tunnel3) => {
    if (!tunnel3) {
      throw new Error(
        "Command component must be used within a <SlashProvider/>. Make sure your instance of editor and command are wrapped in the provider"
      );
    }
    return /* @__PURE__ */ import_react6.default.createElement(tunnel3.Inlet, null, /* @__PURE__ */ import_react6.default.createElement(
      import_cmdk.Command,
      {
        ...restProps,
        ref,
        onKeyDown: (e) => e.stopPropagation(),
        className,
        id: SLASH_EXTENSION_DOM_ID
      },
      /* @__PURE__ */ import_react6.default.createElement(
        import_cmdk.Command.Input,
        {
          value: query,
          onValueChange: onChange,
          style: { display: "none" }
        }
      ),
      children
    ));
  });
});
Command.displayName = "SlashCommand";
var command_default = Command;

// src/components/item.tsx
var import_react7 = require("@tiptap/react");
var import_react8 = __toESM(require("react"), 1);
var import_cmdk2 = require("cmdk");
var import_react9 = require("@xstate/store/react");
var Item = import_react8.default.forwardRef((props, ref) => {
  const { onCommand, className, children, ...restProps } = props;
  const { range, localEditor } = (0, import_react9.useSelector)(
    store_default,
    (state) => state.context
  );
  if (!localEditor) {
    throw new Error(
      "Editor is required, Please provide editor to the Cmd.Root or use within EditorProvider."
    );
  }
  if (!range) {
    return null;
  }
  return /* @__PURE__ */ import_react8.default.createElement(
    import_cmdk2.CommandItem,
    {
      ...restProps,
      onSelect: () => onCommand({ editor: localEditor, range }),
      ref,
      className
    },
    children
  );
});
Item.displayName = "SlashItem";
var item_default = Item;

// src/components/root.tsx
var import_react10 = require("@tiptap/react");
var import_react11 = __toESM(require("react"), 1);
var SlashCmdRoot = (props) => {
  const { children, editor: propEditor } = props;
  const { editor: contextEditor } = (0, import_react10.useCurrentEditor)() || {};
  const editor = propEditor || contextEditor;
  (0, import_react11.useEffect)(() => {
    if (editor) {
      store_default.send({
        type: "setLocalEditor",
        localEditor: editor
      });
    }
  }, [editor]);
  return /* @__PURE__ */ import_react11.default.createElement(import_react11.default.Fragment, null, children);
};
var root_default = SlashCmdRoot;

// src/components/index.tsx
var import_cmdk3 = require("cmdk");
var SlashCommand = {
  Root: root_default,
  Cmd: command_default,
  List: import_cmdk3.Command.List,
  Item: item_default,
  Empty: import_cmdk3.Command.Empty,
  Loading: import_cmdk3.Command.Loading,
  Separator: import_cmdk3.Command.Separator,
  Group: import_cmdk3.Command.Group
};
var components_default = SlashCommand;

// src/components/slash-provider.tsx
var import_react12 = __toESM(require("react"), 1);
var SlashCmdProvider = (props) => {
  const tunnelInstance = import_react12.default.useRef(tunnel_default()).current;
  return /* @__PURE__ */ import_react12.default.createElement(tunnel_instance_default.Provider, { value: tunnelInstance }, props.children);
};
var slash_provider_default = SlashCmdProvider;

// src/extensions/suggestions.ts
var createSuggestionsItems = (items) => {
  return items;
};
var suggestions_default = createSuggestionsItems;

// src/extensions/slash-extension.ts
var import_react16 = require("@tiptap/react");
var import_suggestion = __toESM(require("@tiptap/suggestion"), 1);

// src/extensions/render-items.ts
var import_react14 = require("react");
var import_react15 = require("@tiptap/react");
var import_tippy = __toESM(require("tippy.js"), 1);

// src/components/command-outlet.tsx
var import_react13 = __toESM(require("react"), 1);
var CommandTunnelOutlet = (props) => {
  import_react13.default.useEffect(() => {
    store_default.send({
      type: "setQuery",
      query: props.query
    });
  }, [props.query]);
  import_react13.default.useEffect(() => {
    store_default.send({
      type: "setRange",
      range: props.range
    });
  }, [props.range]);
  import_react13.default.useEffect(() => {
    const abortController = new AbortController();
    document.addEventListener(
      "keydown",
      (event) => {
        if (navigationKeys.includes(event.key)) {
          event.preventDefault();
          const slashCommandRef = document.getElementById(
            SLASH_EXTENSION_DOM_ID
          );
          if (slashCommandRef) {
            slashCommandRef.dispatchEvent(
              new KeyboardEvent("keydown", {
                key: event.key,
                cancelable: true,
                bubbles: true
              })
            );
            return false;
          }
        }
      },
      {
        signal: abortController.signal
      }
    );
    return () => {
      abortController.abort();
    };
  }, []);
  return /* @__PURE__ */ import_react13.default.createElement(tunnel_instance_default.Consumer, null, (tunnelInstance) => {
    if (!tunnelInstance) {
      throw new Error(
        "Command component must be used within a <SlashProvider/>. Make sure your instance of editor and command are wrapped in the provider"
      );
    }
    return /* @__PURE__ */ import_react13.default.createElement(tunnelInstance.Outlet, null);
  });
};
var command_outlet_default = CommandTunnelOutlet;

// src/extensions/render-items.ts
var renderItems = (elementRef) => {
  let component = null;
  let popup = null;
  return {
    onStart: (props) => {
      const { editor, clientRect } = props;
      component = new import_react15.ReactRenderer(command_outlet_default, {
        editor,
        props
      });
      const { selection } = editor.state;
      const parentNode = selection.$from.node(selection.$from.depth);
      const blockType = parentNode.type.name;
      if (blockType === "codeBlock") {
        return false;
      }
      popup = (0, import_tippy.default)("body", {
        getReferenceClientRect: props.clientRect,
        appendTo: () => elementRef ? elementRef.current : document.body,
        content: component.element,
        showOnCreate: true,
        interactive: true,
        trigger: "manual",
        placement: "bottom-start"
      });
    },
    onUpdate: (props) => {
      component?.updateProps(props);
      popup?.[0]?.setProps({
        // @ts-ignore
        getReferenceClientRect: props.clientRect
      });
    },
    onKeyDown: (props) => {
      if (props.event.key === "Escape") {
        popup?.[0]?.hide();
        return true;
      }
      return component?.ref?.onKeyDown(props);
    },
    onExit: () => {
      popup?.[0]?.destroy();
      component?.destroy();
    }
  };
};
var render_items_default = renderItems;

// src/extensions/slash-extension.ts
var slashExtenstionSuggestion = import_react16.Extension.create({
  name: SLASH_EXTENSION_NAME,
  addOptions() {
    return {
      suggestion: {
        char: "/",
        command: ({ editor, range, props }) => {
          props.command({ editor, range });
        },
        render: render_items_default
      }
    };
  },
  addProseMirrorPlugins() {
    return [
      (0, import_suggestion.default)({
        editor: this.editor,
        ...this.options.suggestion
      })
    ];
  }
});
var slash_extension_default = slashExtenstionSuggestion;

// src/extensions/helper.ts
var enableKeyboardNavigation = (event) => {
  if (navigationKeys.includes(event.key)) {
    const slashCommand = document.getElementById(SLASH_EXTENSION_DOM_ID);
    if (slashCommand) {
      return true;
    }
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Slash,
  SlashCmd,
  SlashCmdProvider,
  createSuggestionsItems,
  enableKeyboardNavigation,
  renderItems
});
